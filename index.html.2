<!DOCTYPE html>
<html>

<head>
  <script data-require="d3@3.5.3" data-semver="3.5.3" src="//cdnjs.cloudflare.com/ajax/libs/d3/3.5.3/d3.js"></script>
  <style>
    body {
      font: 10px sans-serif;
    }
    
    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }
    
    .x.axis path {
      display: none;
    }
    
    .line {
      fill: none;
      stroke: steelblue;
      stroke-width: 1.5px;
    }
  </style>
</head>

<body>
  <script>
 
    
//d3.csv("https://rahulpatel23.github.io/nyfldata.csv",function(data){

//myData = data; 
//});
   //var myData = "date	New York	San Francisco	Austin\n\

var myData = "date	Florida	New York\n\
20200301	2	1\n\
20200302	2	1\n\
20200303	3	2\n\
20200304	3	11\n\
20200305	4	22\n\
20200306	7	44\n\
20200307	12	89\n\
20200308	13	106\n\
20200309	14	142\n\
20200310	23	173\n\
20200311	26	217\n\
20200312	46	326\n\
20200313	70	421\n\
20200314	70	610\n\
20200315	109	732\n\
20200316	141	950\n\
20200317	210	1375\n\
20200318	326	2387\n\
20200319	434	4161\n\
20200320	564	7113\n\
20200321	764	10371\n\
20200322	1000	15188\n\
20200323	1222	20899\n\
20200324	1467	25704\n\
20200325	1971	33117\n\
20200326	2478	39058\n\
20200327	3198	44746\n\
20200328	4038	53517\n\
20200329	4943	59783\n\
20200330	5695	67504\n\
20200331	6742	76211\n\
20200401	7769	84364\n\
20200402	9000	93360\n\
20200403	10260	103689\n\
20200404	11537	115963\n\
20200405	12342	124085\n\
20200406	13621	133389\n\
20200407	14739	141703\n\
20200408	15690	151271\n\
20200409	16819	162036\n\
20200410	17960	172830\n\
20200411	18978	182990\n\
20200412	19855	191425\n\
20200413	21011	197973\n\
20200414	21620	205375\n\
20200415	22526	217130\n\
20200416	23332	225761\n\
20200417	24745	233293\n\
20200418	25484	240542\n\
20200419	26306	246741\n\
20200420	27050	251608\n\
20200421	27861	255932\n\
20200422	28301	261591\n\
20200423	29640	267932\n\
20200424	30525	276218\n\
20200425	30831	286901\n\
20200426	31520	292914\n\
20200427	32130	296991\n\
20200428	32838	300276\n\
20200429	33185	304994\n\
20200430	33683	309696\n\
20200501	34720	313575\n\
20200502	35455	318134\n\
20200503	36070	321833\n\
20200504	36889	324357\n\
20200505	37431	326659\n\
20200506	37994	329405\n\
20200507	38820	332931\n\
20200508	39191	335804\n\
20200509	39993	338519\n\
20200510	40588	340657\n\
20200511	40974	342267\n\
20200512	41915	343705\n\
20200513	42394	345828\n\
20200514	43202	348192\n\
20200515	44130	350951\n\
20200516	44803	353136\n\
20200517	45580	355037\n\
20200518	46434	356278\n\
20200519	46936	357757\n\
20200520	47463	359235\n\
20200521	48667	361313\n\
20200522	49443	362991\n\
20200523	50119	364745\n\
20200524	50859	366346\n\
20200525	51738	367625\n\
20200526	52247	368669\n\
20200527	52626	369801\n\
20200528	53277	371559\n\
20200529	54489	373108\n\
20200530	55416	374471\n\
20200531	56155	375575\n\
20200601	56822	376520\n\
20200602	57439	377881\n\
20200603	58756	378924\n\
20200604	60175	379977\n\
20200605	61480	381019\n\
20200606	62750	382102\n\
20200607	63930	382879\n\
20200608	64896	383591\n\
20200609	65992	384281\n\
20200610	67363	384945\n\
20200611	69061	385669\n\
20200612	70963	386490\n\
20200613	73544	387402\n\
20200614	75560	388096\n\
20200615	77318	388719\n\
20200616	80101	389349\n\
20200617	82711	389910\n\
20200618	85918	390536\n\
20200619	89740	391330\n\
20200620	93789	392037\n\
20200621	97283	392702\n\
20200622	100209	393257\n\
20200623	103495	393855\n\
20200624	109006	394430\n\
20200625	114010	395168\n\
20200626	122952	395972\n\
20200627	132537	396669\n\
20200628	141067	397293\n\
20200629	146333	397684\n\
20200630	152426	398142\n\
20200701	158989	398770\n\
20200702	169098	399642\n\
20200703	178586	400561\n\
20200704	190044	401286\n\
20200705	200103	401822\n\
20200706	206439	402338\n\
20200707	213786	402928\n\
20200708	223775	403619\n\
20200709	232710	404207\n\
20200710	244143	404997\n\
20200711	254503	405724\n\
20200712	269803	406403\n\
20200713	282427	406962\n\
20200714	291621	407875\n\
20200715	301802	408709\n\
20200716	315767	409476\n\
20200717	327233	410254\n\
20200718	337561	411006\n\
20200719	350039	411515\n\
20200720	360386	412034\n\
20200721	369826	412889\n\
20200722	379611	413595\n";

    var margin = {
        top: 20,
        right: 80,
        bottom: 30,
        left: 50
      },
      width = 900 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

    var parseDate = d3.time.format("%Y%m%d").parse;

    var x = d3.time.scale()
      .range([0, width]);

    var y = d3.scale.linear()
      .range([height, 0]);

    var color = d3.scale.category10();

    var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom");

    var yAxis = d3.svg.axis()
      .scale(y)
      .orient("left");

    var line = d3.svg.line()
      .interpolate("basis")
      .x(function(d) {
        return x(d.date);
      })
      .y(function(d) {
        return y(d.cases);
      });

    var svg = d3.select("body").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var data = d3.tsv.parse(myData);

    color.domain(d3.keys(data[0]).filter(function(key) {
      return key !== "date";
    }));

    data.forEach(function(d) {
      d.date = parseDate(d.date);
    });

    var cities = color.domain().map(function(name) {
      return {
        name: name,
        values: data.map(function(d) {
          return {
            date: d.date,
            cases: +d[name]
          };
        })
      };
    });

    x.domain(d3.extent(data, function(d) {
      return d.date;
    }));

    y.domain([
      d3.min(cities, function(c) {
        return d3.min(c.values, function(v) {
          return v.cases;
        });
      }),
      d3.max(cities, function(c) {
        return d3.max(c.values, function(v) {
          return v.cases;
        });
      })
    ]);

    var legend = svg.selectAll('g')
      .data(cities)
      .enter()
      .append('g')
      .attr('class', 'legend');

    legend.append('rect')
      .attr('x', width - 20)
      .attr('y', function(d, i) {
        return i * 20;
      })
      .attr('width', 10)
      .attr('height', 10)
      .style('fill', function(d) {
        return color(d.name);
      });

    legend.append('text')
      .attr('x', width - 8)
      .attr('y', function(d, i) {
        return (i * 20) + 9;
      })
      .text(function(d) {
        return d.name;
      });

    svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

    svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
      .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Cases");

    var city = svg.selectAll(".city")
      .data(cities)
      .enter().append("g")
      .attr("class", "city");

    city.append("path")
      .attr("class", "line")
      .attr("d", function(d) {
        return line(d.values);
      })
      .style("stroke", function(d) {
        return color(d.name);
      });

    city.append("text")
      .datum(function(d) {
        return {
          name: d.name,
          value: d.values[d.values.length - 1]
        };
      })
      .attr("transform", function(d) {
        return "translate(" + x(d.value.date) + "," + y(d.value.cases) + ")";
      })
      .attr("x", 3)
      .attr("dy", ".35em")
      .text(function(d) {
        return d.name;
      });

    var mouseG = svg.append("g")
      .attr("class", "mouse-over-effects");

    mouseG.append("path") // this is the black vertical line to follow mouse
      .attr("class", "mouse-line")
      .style("stroke", "black")
      .style("stroke-width", "1px")
      .style("opacity", "0");
      
    var lines = document.getElementsByClassName('line');

    var mousePerLine = mouseG.selectAll('.mouse-per-line')
      .data(cities)
      .enter()
      .append("g")
      .attr("class", "mouse-per-line");

    mousePerLine.append("circle")
      .attr("r", 7)
      .style("stroke", function(d) {
        return color(d.name);
      })
      .style("fill", "none")
      .style("stroke-width", "1px")
      .style("opacity", "0");

    mousePerLine.append("text")
      .attr("transform", "translate(10,3)");

    mouseG.append('svg:rect') // append a rect to catch mouse movements on canvas
      .attr('width', width) // can't catch mouse events on a g element
      .attr('height', height)
      .attr('fill', 'none')
      .attr('pointer-events', 'all')
      .on('mouseout', function() { // on mouse out hide line, circles and text
        d3.select(".mouse-line")
          .style("opacity", "0");
        d3.selectAll(".mouse-per-line circle")
          .style("opacity", "0");
        d3.selectAll(".mouse-per-line text")
          .style("opacity", "0");
      })
      .on('mouseover', function() { // on mouse in show line, circles and text
        d3.select(".mouse-line")
          .style("opacity", "1");
        d3.selectAll(".mouse-per-line circle")
          .style("opacity", "1");
        d3.selectAll(".mouse-per-line text")
          .style("opacity", "1");
      })
      .on('mousemove', function() { // mouse moving over canvas
        var mouse = d3.mouse(this);
        d3.select(".mouse-line")
          .attr("d", function() {
            var d = "M" + mouse[0] + "," + height;
            d += " " + mouse[0] + "," + 0;
            return d;
          });

        d3.selectAll(".mouse-per-line")
          .attr("transform", function(d, i) {
            console.log(width/mouse[0])
            var xDate = x.invert(mouse[0]),
                bisect = d3.bisector(function(d) { return d.date; }).right;
                idx = bisect(d.values, xDate);
            
            var beginning = 0,
                end = lines[i].getTotalLength(),
                target = null;

            while (true){
              target = Math.floor((beginning + end) / 2);
              pos = lines[i].getPointAtLength(target);
              if ((target === end || target === beginning) && pos.x !== mouse[0]) {
                  break;
              }
              if (pos.x > mouse[0])      end = target;
              else if (pos.x < mouse[0]) beginning = target;
              else break; //position found
            }
            
            d3.select(this).select('text')
              .text(y.invert(pos.y).toFixed(2));
              
            return "translate(" + mouse[0] + "," + pos.y +")";
          });
      });
      
  </script>
</body>

</html>
